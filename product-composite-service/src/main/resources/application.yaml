# Server Port
server:
  port: 8080

# Logging configuration
logging:
  level:
    root: INFO

# Microservices URL
app:
  product:
    url: http://localhost:8081
  recommendation:
    url: http://localhost:8082
  review:
    url: http://localhost:8083

# Open API
springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: com.ricsanfre.microservices.composite.product
  pathsToMatch: /**

api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL
    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com
  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
  product-composite:
    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a **404 - Not Found** error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an **400 - BAD Request** error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.

        This means that a delete request of a non-existing product will return **200 Ok**.    


# Actuator configuration
management:
  endpoints:
    web:
      exposure:
        include: health, info
  # Show health details
  endpoint:
    health:
      # Show health details
      show-details: always
      # Enable liveness and readiness probes
      probes:
        enabled: true
  # Enabling exposure of env app information in applications.properties file
  info:
    env:
      enabled: true
  # Adding readiness and liveness probe states in health endpoint
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true

# Configuring env info
info:
  app:
    name: product-composite
    description: "Product-Composite Microservice"
    version: "1.0"
  company: ricsanfre.com