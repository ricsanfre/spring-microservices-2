services:
  postgres:
    container_name: postgres
    image: postgres:16.2
    environment:
      POSTGRES_USER: review
      POSTGRES_PASSWORD: password
      POSTGRES_DB: review
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - db
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    container_name: mongo
    image: mongo:7.0.8
    environment:
      MONGO_INITDB_ROOT_USERNAME: ricsanfre
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo:/data
    ports:
      - "27017:27017"
    networks:
      - db
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand({find:"app_db_name.devUser"}).ok' | mongosh --authenticationDatabase admin --host localhost -u ricsanfre  -p password admin --quiet | grep -q 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s

  product:
    container_name: product
    image: ricsanfre/product-service
    mem_limit: 512m
    ports:
      - "7081:8080"
    environment:
      SERVER_PORT: 8080
      SPRING_DATA_MONGODB_HOST: mongodb
    networks:
      - spring
      - db
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  review:
    container_name: review
    image: ricsanfre/review-service
    mem_limit: 512m
    ports:
      - "7082:8080"
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/review
    networks:
      - spring
      - db
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  recommendation:
    container_name: recommendation
    image: ricsanfre/recommendation-service
    mem_limit: 512m
    ports:
      - "7083:8080"
    environment:
      SERVER_PORT: 8080
      SPRING_DATA_MONGODB_HOST: mongodb
    networks:
      - spring
      - db
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  product-composite:
    container_name: product-composite
    image: ricsanfre/product-composite-service
    mem_limit: 512m
    ports:
      - "8080:8080"
    environment:
      SERVER_PORT: 8080
      APP_PRODUCT_URL: http://product:8080
      APP_REVIEW_URL: http://review:8080
      APP_RECOMMENDATION_URL: http://recommendation:8080
    networks:
      - spring
      - db
    depends_on:
      product:
        condition: service_healthy
      recommendation:
        condition: service_healthy
      review:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
networks:
  db:
    driver: bridge
  spring:
    driver: bridge

volumes:
  postgres:
  mongo: