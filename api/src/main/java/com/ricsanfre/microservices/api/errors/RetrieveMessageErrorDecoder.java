package com.ricsanfre.microservices.api.errors;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ricsanfre.microservices.api.errors.exceptions.InvalidInputException;
import com.ricsanfre.microservices.api.errors.exceptions.NotFoundException;
import com.ricsanfre.microservices.api.errors.exceptions.ServiceNotAvailableException;
import feign.Response;
import feign.codec.ErrorDecoder;

import java.io.IOException;
import java.io.InputStream;

public class RetrieveMessageErrorDecoder implements ErrorDecoder {

    private final ErrorDecoder errorDecoder = new Default();

    @Override
    public Exception decode(String methodKey, Response response) {

        String message = null;
        try (InputStream bodyIs = response.body().asInputStream()) {
            // Get message from response body
            message = new String(response.body().asInputStream().readAllBytes());
            // Check if body is ApiResponse JSON object
            ObjectMapper mapper = new ObjectMapper();
            ApiErrorResponse errorResponse = mapper.readValue(message, ApiErrorResponse.class);
            message = errorResponse.getMessage() != null ? errorResponse.getMessage() : null;
        } catch (JsonParseException e) {
            // OpenFeign error is not propagated from the backend microservice
            // Body does not contain a ApiResponse JSON object
            // i.e.: Exception generated by OpenFeign client

        } catch (IOException e) {
            return new RuntimeException(e.getMessage());
        }
        switch (response.status()) {
            // NOT_FOUND
            case 404:
                return new NotFoundException(message != null ? message : "Not found");
            // BAD_REQUEST
            case 400:
                return new InvalidInputException(message != null ? message : "Bad Request");
            // SERVICE_UNAVAILABLE. Throws by OpenFeign
            case 503:
                return new ServiceNotAvailableException(message != null ? message : "Service Unavailable");
            default:
                return errorDecoder.decode(methodKey, response);
        }
    }
}
